from flask import Flask, request, jsonify
from flask_cors import CORS
import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime
import pytz
import os

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Global db variable declaration
db = None

# Firebase initialization with better error handling
try:
    cred = credentials.Certificate("firebase_config.json")
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("Firebase connection established successfully")
except Exception as e:
    print(f"CRITICAL ERROR initializing Firebase: {e}")
    # Don't exit - we'll check for db before using it

# Validate Firebase connection
if db is None:
    print("WARNING: Firebase database not initialized. Check your credentials.")

# Database helper functions
def get_user_by_uid(nfc_uid):
    """Find a user with NFC UID from registration collection"""
    if db is None:
        print("ERROR: Database not initialized")
        return None
        
    try:
        registration_ref = db.collection('registration')
        query = registration_ref.where('nfc_uid', '==', nfc_uid).limit(1)
        results = query.get()
        
        for user in results:
            return {**user.to_dict(), 'id': user.id}
        return None
    except Exception as e:
        print(f"Error querying user: {e}")
        return None

def record_attendance(user_id, nfc_uid, name, department, device_id="unknown"):
    """Record an attendance event"""
    if db is None:
        print("ERROR: Database not initialized")
        return None, "Database connection error"
        
    try:
        now = datetime.now(pytz.UTC)
        today = now.strftime("%Y-%m-%d")
        
        # Check if user already has attendance record for today
        attendance_ref = db.collection('attendance')
        query = attendance_ref.where('user_id', '==', user_id).where('date', '==', today).get()
        
        if len(query) > 0:
            return None, "Attendance already recorded for today"
        
        # Create new attendance record
        attendance_data = {
            'user_id': user_id,
            'nfc_uid': nfc_uid,
            'name': name,
            'department': department,
            'timestamp': now,
            'date': today,
            'action': 'check_in',
            'device_id': device_id
        }
        
        attendance_ref = db.collection('attendance').document()
        attendance_ref.set(attendance_data)
        
        # Update user's status in registration
        db.collection('registration').document(user_id).update({
            'status': 'present',
            'timestamp': now
        })
        
        return {**attendance_data, 'id': attendance_ref.id}, None
    except Exception as e:
        print(f"Error in record_attendance: {e}")
        return None, f"Database error: {str(e)}"

# Routes remain the same, but now we have better error handling
@app.route("/")
def index():
    return jsonify({
        "status": "online",
        "message": "NFC Attendance API is operational",
        "firebase": "connected" if db else "disconnected",
        "timestamp": datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M:%S")
    })

@app.route("/api/attendance", methods=["POST"])
def process_attendance():
    """Process attendance from ESP32"""
    try:
        # Check database connection first
        if db is None:
            return jsonify({"error": "Database not connected"}), 500
            
        data = request.get_json()
        
        # Validate required fields
        if 'uid' not in data:
            return jsonify({"error": "Missing NFC UID"}), 400
            
        nfc_uid = data['uid']
        device_id = data.get('device_id', 'unknown')
        
        # Find user by UID
        user = get_user_by_uid(nfc_uid)
        if not user:
            return jsonify({
                "error": "User not found", 
                "uid": nfc_uid,
                "timestamp": datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M:%S")
            }), 404
        
        # Record attendance
        attendance, error = record_attendance(
            user_id=user['id'],
            nfc_uid=nfc_uid,
            name=user['name'],
            department=user.get('department', 'Unknown'),
            device_id=device_id
        )
        
        if error:
            return jsonify({"error": error}), 400
            
        return jsonify({
            "status": "success",
            "message": "Attendance recorded successfully",
            "user": user['name'],
            "timestamp": datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M:%S")
        }), 201
        
    except Exception as e:
        print(f"Error recording attendance: {e}")
        return jsonify({"error": "Attendance recording failed"}), 500

# Other routes remain the same...

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True, host="0.0.0.0", port=port)